package it.water.email.model;

import it.water.core.api.permission.ProtectedEntity;
import it.water.core.permission.action.CrudActions;
import it.water.core.permission.annotations.AccessControl;
import it.water.core.permission.annotations.DefaultRoleAccess;
import it.water.core.validation.annotations.NoMalitiusCode;
import it.water.core.validation.annotations.NotNullOnPersist;
import it.water.repository.jpa.model.AbstractJpaEntity;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.Size;
import lombok.*;


/**
 * @Generated by Water Generator
 * EMail Entity Class.
 */
//JPA
@Entity
@Table(name = "w_email_template", uniqueConstraints = @UniqueConstraint(columnNames = {"templateName"}))
@Access(AccessType.FIELD)
//Lombok
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@RequiredArgsConstructor
@Getter
@Setter(AccessLevel.PROTECTED)
@ToString
@EqualsAndHashCode(of = { "templateName"},callSuper = true)
@AccessControl(availableActions = {CrudActions.SAVE, CrudActions.REMOVE, CrudActions.FIND, CrudActions.FIND_ALL, CrudActions.UPDATE},
        rolesPermissions = {
                @DefaultRoleAccess(roleName = EMailTemplate.DEFAULT_MANAGER_ROLE, actions = {CrudActions.SAVE, CrudActions.REMOVE, CrudActions.FIND, CrudActions.FIND_ALL, CrudActions.UPDATE}),
                @DefaultRoleAccess(roleName = EMailTemplate.DEFAULT_VIEWER_ROLE, actions = {CrudActions.FIND, CrudActions.FIND_ALL}),
                @DefaultRoleAccess(roleName = EMailTemplate.DEFAULT_EDITOR_ROLE, actions = {CrudActions.SAVE, CrudActions.FIND, CrudActions.FIND_ALL, CrudActions.UPDATE}),
        })
public class EMailTemplate extends AbstractJpaEntity implements ProtectedEntity {
    public static final String DEFAULT_MANAGER_ROLE = "emailTemplateManager";
    public static final String DEFAULT_VIEWER_ROLE = "emailTemplateViewer";
    public static final String DEFAULT_EDITOR_ROLE = "emailTemplateEditor";
    @NotNullOnPersist
    @NoMalitiusCode
    @NotEmpty
    @Size(max = 255)
    @NonNull
    private String templateName;
    @NotNullOnPersist
    @NoMalitiusCode
    @NotEmpty
    @Column(columnDefinition = "VARCHAR(3000)")
    @NonNull
    @Setter
    private String description;
    @Column(columnDefinition = "VARCHAR(10000)")
    @NonNull
    @Setter
    private String content;

}